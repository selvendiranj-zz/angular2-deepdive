// todo: add load from config file, TBD
"use strict";
const path = require("path");
const Listr = require('listr');
const cpy = require('cpy');
const del = require('del');
const npm_submodules_1 = require("npm-submodules");
const tasks_1 = require("../tasks");
function buildCommand({ project, verbose, clean, local, main, watch, skipBundles }) {
    // 1. clean dist folders
    // 2.1 merge pkg json
    // todo: 2.2 validate pkg (main, module, types fields)
    // 2.3 write pkg
    // 3. compile ts
    return npm_submodules_1.findSubmodules(project, { local })
        .then(opts => new Listr([
        {
            title: 'Clean dist folders',
            task: () => new Listr(opts.map(opt => ({
                title: `Cleaning ${opt.dist}`,
                task: () => del(opt.dist)
            }))),
            skip: () => !clean
        },
        {
            title: 'Copy md files and license',
            task: () => Promise.all(opts.map(opt => cpy(['*.md', 'LICENSE'], opt.dist)
                .then(() => cpy([path.join(opt.src, '*.md'),
                path.join(opt.src, 'LICENSE')], opt.dist))))
        },
        {
            title: "Build package.json files",
            task: () => npm_submodules_1.buildPkgs(opts, { local })
        },
        {
            title: 'Build projects',
            task: () => new Listr(opts.map(opt => ({
                title: `Building ${opt.pkg.name} (${opt.src})`,
                task: () => tasks_1.build(opt.project)
            })))
        },
        {
            title: 'Bundling umd version',
            task: () => new Listr(opts.map(opt => ({
                title: `Bundling ${opt.pkg.name}`,
                task: () => tasks_1.bundleUmd({
                    main,
                    src: opt.src,
                    dist: opt.dist,
                    name: opt.pkg.name,
                    tsconfig: opt.tsconfig.path,
                    minify: false
                })
            }))),
            skip: () => watch && skipBundles
        },
        {
            title: 'Bundling minified umd version',
            task: () => new Listr(opts.map(opt => ({
                title: `Bundling ${opt.pkg.name}`,
                task: () => tasks_1.bundleUmd({
                    main,
                    src: opt.src,
                    dist: opt.dist,
                    name: opt.pkg.name,
                    tsconfig: opt.tsconfig.path,
                    minify: true
                })
            }))),
            skip: () => watch || skipBundles
        },
    ], { renderer: verbose ? 'verbose' : 'default' }));
}
exports.buildCommand = buildCommand;
function buildTsRun(cli) {
    const { project, watch, verbose, clean, local, skipBundles } = cli.flags;
    let main = cli.flags.main || 'index.ts';
    return buildCommand({ project, verbose, clean, local, main, watch, skipBundles })
        .then(tasks => npm_submodules_1.tasksWatch({ project, tasks, watch }));
}
exports.buildTsRun = buildTsRun;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9uZ20vY29tbWFuZHMvYnVpbGQuY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUM7O0FBRXZDLDZCQUE4QjtBQUM5QixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0IsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUUzQixtREFBdUU7QUFDdkUsb0NBQTRDO0FBRTVDLHNCQUE2QixFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBQztJQUNyRix3QkFBd0I7SUFDeEIscUJBQXFCO0lBQ3JCLHNEQUFzRDtJQUN0RCxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLE1BQU0sQ0FBQywrQkFBYyxDQUFDLE9BQU8sRUFBRSxFQUFDLEtBQUssRUFBQyxDQUFDO1NBQ3BDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUM7UUFDdEI7WUFDRSxLQUFLLEVBQUUsb0JBQW9CO1lBQzNCLElBQUksRUFBRSxNQUFNLElBQUksS0FBSyxDQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO2dCQUNmLEtBQUssRUFBRSxZQUFZLEdBQUcsQ0FBQyxJQUFJLEVBQUU7Z0JBQzdCLElBQUksRUFBRSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO2FBQzFCLENBQUMsQ0FBQyxDQUNKO1lBQ0QsSUFBSSxFQUFFLE1BQU0sQ0FBQyxLQUFLO1NBQ25CO1FBQ0Q7WUFDRSxLQUFLLEVBQUUsMkJBQTJCO1lBQ2xDLElBQUksRUFBRSxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxD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