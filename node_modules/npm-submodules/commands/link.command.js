"use strict";
const Listr = require('listr');
const utils_1 = require("../utils");
const tasks_1 = require("../tasks");
// todo: 'npm-link` doesn't track adding new files,
// so watch mode should be added
function npmLinkCommand({ project, local, deep, verbose, yarn, here }) {
    const noDeepLinking = deep === false;
    // 1. clean dist folders
    // 2.1 merge pkg json
    // 2.2 validate pkg (main, module, types)
    // 2.3 write pkg
    // 3. compile ts
    return utils_1.findSubmodules(project, { local })
        .then((opts) => new Listr([
        {
            title: 'Link all submodules',
            task: () => {
                const linkingTasks = new Listr(opts.map(opt => ({
                    title: `npm link ${opt.pkg.name} (from: ${opt.dist})`,
                    task: () => tasks_1.npmLink({ yarn, cwd: opt.dist })
                })));
                if (noDeepLinking) {
                    return linkingTasks;
                }
                opts.filter(opt => opt.cross.length > 0)
                    .forEach(opt => opt.cross
                    .forEach(crossName => linkingTasks.add({
                    title: `npm link ${crossName} to ${opt.pkg.name} (${opt.src})`,
                    task: () => tasks_1.npmLink({ yarn, cwd: opt.dist, module: crossName })
                })));
                return linkingTasks;
            }
        },
        {
            title: 'Link submodules to local project',
            task: () => new Listr(opts.map(opt => ({
                title: `npm link ${opt.pkg.name}`,
                task: () => tasks_1.npmLink({ yarn, module: opt.pkg.name, cwd: '.' })
            }))),
            skip: () => here !== true
        }
    ], { renderer: verbose ? 'verbose' : 'default' }));
}
exports.npmLinkCommand = npmLinkCommand;
function run(cli) {
    const { project, verbose, local, deep, yarn, here } = cli.flags;
    return npmLinkCommand({ project, verbose, local, deep, yarn, here })
        .then(tasks => tasks.run());
}
exports.run = run;
